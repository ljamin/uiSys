<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/mvc
		http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context.xsd
	 ">

    <!-- 可以扫描controller、service、...
    这里让扫描controller，指定controller的包
     -->
    <context:component-scan base-package="com.qjq.controller" />
    <!-- 静态资源解析
    包括 ：js、css、img、..

     -->

    <mvc:resources location="/img/" mapping="/img/**"/>
    <mvc:resources location="/static/" mapping="/static/**"/>
    <!--
    mvc:annotation-driven默认加载很多的参数绑定方法，
    比如json转换解析器就默认加载了
    实际开发时使用mvc:annotation-driven
     -->
    <mvc:annotation-driven/><!--conversion-service="conversionService"-->

    <!-- 视图解析器
    解析jsp解析，默认使用jstl标签，classpath下的得有jstl的包
     -->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <!-- 配置jsp路径的前缀 -->
        <property name="prefix" value="/WEB-INF/page/"/>
        <!-- 配置jsp路径的后缀 -->
       <!-- <property name="suffix" value=".html"/>-->
    </bean>

    <!-- &lt;!&ndash; 自定义参数绑定 &ndash;&gt;
     <bean id="conversionService" class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
         &lt;!&ndash; 转换器 &ndash;&gt;
         <property name="converters">
             <list>
                 &lt;!&ndash; 日期类型转换 &ndash;&gt;
                 <bean class="cn.itcast.ssm.controller.converter.CustomDateConverter"/>
             </list>
         </property>


     </bean>-->

    <!-- &lt;!&ndash; 校验器 &ndash;&gt;
     <bean id="validator"
           class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
         &lt;!&ndash; hibernate校验器&ndash;&gt;
         <property name="providerClass" value="org.hibernate.validator.HibernateValidator" />
         &lt;!&ndash; 指定校验使用的资源文件，在文件中配置校验错误信息，如果不指定则默认使用classpath下的ValidationMessages.properties &ndash;&gt;
         <property name="validationMessageSource" ref="messageSource" />
     </bean>-->
    <!-- &lt;!&ndash; 校验错误信息配置文件 &ndash;&gt;
     <bean id="messageSource"
           class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
         &lt;!&ndash; 资源文件名&ndash;&gt;
         <property name="basenames">
             <list>
                 <value>classpath:CustomValidationMessages</value>
             </list>
         </property>
         &lt;!&ndash; 资源文件编码格式 &ndash;&gt;
         <property name="fileEncodings" value="utf-8" />
         &lt;!&ndash; 对资源文件内容缓存时间，单位秒 &ndash;&gt;
         <property name="cacheSeconds" value="120" />
     </bean>
     &lt;!&ndash; 全局异常处理器
     只要实现HandlerExceptionResolver接口就是全局异常处理器
      &ndash;&gt;
     <bean class="cn.itcast.ssm.exception.CustomExceptionResolver"></bean>

 -->

     <bean id="multipartResolver"
           class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
         <property name="maxUploadSize">
             <value>5242880</value>
         </property>
     </bean>

    <!-- &lt;!&ndash;拦截器 &ndash;&gt;
     <mvc:interceptors>
         &lt;!&ndash;多个拦截器,顺序执行 &ndash;&gt;
         &lt;!&ndash; 登陆认证拦截器 &ndash;&gt;
         <mvc:interceptor>
             <mvc:mapping path="/**"/>
             <bean class="cn.itcast.ssm.interceptor.LoginInterceptor"></bean>
         </mvc:interceptor>
         <mvc:interceptor>
             &lt;!&ndash; /**表示所有url包括子url路径 &ndash;&gt;
             <mvc:mapping path="/**"/>
             <bean class="cn.itcast.ssm.interceptor.HandlerInterceptor1"></bean>
         </mvc:interceptor>
         <mvc:interceptor>
             <mvc:mapping path="/**"/>
             <bean class="cn.itcast.ssm.interceptor.HandlerInterceptor2"></bean>
         </mvc:interceptor>
     </mvc:interceptors>-->



</beans>